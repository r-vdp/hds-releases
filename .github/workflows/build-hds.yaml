on:
  workflow_dispatch:
    inputs:
      holo-nixpkgs-tag:
        description: 'The holo-nixpkgs tag to build from'
        required: true
        type: string

jobs:
  build:
    runs-on: 'ubuntu-latest'
    strategy:
      matrix:
        include:
          - system: x86_64-linux
    steps:
      - name: "install nix"
        uses: "cachix/install-nix-action@v22"
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= cache.holo.host-1:lNXIXtJgS9Iuw4Cu6X0HINLu9sTfcjEntnrgwMQIMcE= cache.holo.host-2:ZJCkX3AUYZ8soxTLfTb60g+F3MkWD7hkH9y8CgqwhDQ=
            substituters = https://cache.holo.host https://cache.nixos.org/

      - name: "download tag"
        run: |
          curl -v -L \
               -H "Authorization: Bearer ${{ secrets.HOLO_NIXPKGS_PAT }}" \
               https://api.github.com/repos/r-vdp/holo-nixpkgs/tarball/${{ inputs.holo-nixpkgs-tag }} \ |
            tar -xz --strip-components=1 --

      - name: "build holo-dev-server"
        run: |
          # TODO: build the bundle on hydra so that we can set max-jobs to 0
          nix bundle -vL '.#legacyPackages.${{ matrix.system }}.holo-dev-server' #--max-jobs 0

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: holo-dev-server-${{ inputs.holo-nixpkgs-tag }}-${{ matrix.system }}
          path: ./holo-dev-server

  upload-binary:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: build
    outputs:
      release_name: ${{ steps.date.outputs.date }}
    strategy:
      matrix:
        include:
          - system: x86_64-linux
    steps:
    - name: download x86_64-linux artifact
      uses: actions/download-artifact@v4
      with:
        name: holo-dev-server-${{ inputs.holo-nixpkgs-tag }}-x86_64-linux
        path: holo-dev-server
    - run: |
        ls -R
    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d-%H%M%S')" >> ${GITHUB_OUTPUT}
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.date.outputs.date }}
        tag_name: ${{ steps.date.outputs.date }}
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          holo-dev-server/holo-dev-server

  update-flake:
    runs-on: ubuntu-latest
    needs: upload-binary
    steps:
    - uses: actions/checkout@v4
      with:
        ref: "main"
    - name: prefetch x86_64-linux binary
      id: prefetch-x86_64-linux
      run: echo "hash=$(nix shell 'nixpkgs#nurl' -- -H https://github.com/${{ github.repository }}/releases/download/${{ needs.upload-binary.outputs.release_name }}/holo-dev-server)" >> ${GITHUB_OUTPUT}
    - name: overwrite flake.nix
      run: |
        cat > packages.nix << EOF
        # this file is autogenerated by .github/workflows/build-hds.yml
        {
          x86_64-linux.holo-dev-server = builtins.fetchurl {
            url = "https://github.com/${{ github.repository }}/releases/download/${{ needs.upload-index.outputs.release_name }}/holo-dev-server";
            hash = "${{ steps.prefetch-x86_64-linux.outputs.hash }}";
          };
        }
        EOF
    - name: test if flake works
      run: |
        nix flake show --all-systems
        # We don't want to build the checks since we don't have virtualisation support on github runners
        nix flake check -L --all-systems --no-build
    - name: commit and push packages.nix, if it changed
      run: |
        if [[ "$(git status --porcelain)" != "" ]]; then
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add packages.nix
          git commit -m "update packages.nix to release ${{ needs.upload-index.outputs.release_name }}"
          git push origin HEAD:main
        fi
